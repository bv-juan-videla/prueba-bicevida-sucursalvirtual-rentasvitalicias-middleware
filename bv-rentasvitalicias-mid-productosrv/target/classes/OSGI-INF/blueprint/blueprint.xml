<?xml version="1.0" encoding="UTF-8"?>
<!--
    JBoss, Home of Professional Open Source
    Copyright 2014, Red Hat, Inc. and/or its affiliates, and individual
    contributors by the @authors tag. See the copyright.txt in the
    distribution for a full listing of individual contributors.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<!--
   This is the OSGi Blueprint XML file defining the Camel context and routes.  Because the file is in the
   OSGI-INF/blueprint directory inside our JAR, it will be automatically activated as soon as the bundle is installed.

   The root element for any OSGi Blueprint file is 'blueprint' - you also see the namespace definitions for both the Blueprint
   and the Camel namespaces.
-->
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
    xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.0.0"
    xmlns:cxf="http://camel.apache.org/schema/blueprint/cxf"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://camel.apache.org/schema/blueprint/cxf               http://camel.apache.org/schema/blueprint/cxf/camel-cxf.xsd          http://camel.apache.org/schema/blueprint                http://camel.apache.org/schema/blueprint/camel-blueprint.xsd">
    <!-- bean class="org.apache.activemq.camel.component.ActiveMQComponent" id="activemq">
        <property name="brokerURL" value="tcp://esbdev.bicevida.cl:61616"/>
        <property name="userName" value="admin"/>
        <property name="password" value="admin"/>
        <property name="usePooledConnection" value="false"/>
    </bean-->
    <!--bean class="" id="creditosVigentesServices"/-->
    <!-- <bean class="cl.bicevida.beans.processors.ActivityProcessRequest" id="activityProcessRequest"/>
    <bean class="cl.bicevida.beans.aggregators.ActualizaBDPAg" id="actualizaBDPAg"/> -->
    <!--  <camelContext id="_creditos-vigentes-context" xmlns="http://camel.apache.org/schema/blueprint"> -->
    <!--  <bean class="cl.bicevida.beans.processors.ActivityProcessResponse" id="miActivityProcessResponse"/> -->
    <camelContext id="_productos-RV-context" xmlns="http://camel.apache.org/schema/blueprint">
        <propertyPlaceholder id="properties" location="utiles.properties"/>
        <restConfiguration component="restlet" port="{{middleware.productosrv.puerto}}">
            <!--dataFormatProperty key="prettyPrint" value="true"/-->
        </restConfiguration>
        <rest path="/bicevida/rentasvitalicias/productosRV">
            <get uri="/service/ping">
                <route>
                    <log message="PING OK - PRODUCTOS RENTAS VITALICIAS"/>
                </route>
            </get>
            <get outType="java.lang.String" produces="application/json"
                type="java.lang.String" uri="/{rut}">
                <to uri="direct:obtenerProducto2"/>
            </get>
        </rest>
        <!--  Obtener productos RV -->
        <route id="_route_obtenerDatosProducto">
            <from id="_direct:obtenerProducto" uri="direct:obtenerProducto2"/>
            <log id="_log_P131" message="RUT      = ${header.rut}"/>
            <setHeader headerName="CamelHttpPath" id="_CamelHttpPathDatos">
                <simple>/bv-rentasvitalicias-bs-creditos-1.0.0-SNAPSHOT/rentasvitalicias/creditos/productosRV/${header.rut}</simple>
            </setHeader>
            <setBody id="_setBody_Productos">
                <simple>${null}</simple>
            </setBody>
            <log id="_log_121" message="headers      = ${headers}"/>
            <to id="callProductosRV" uri="http4:{{backend.productosrv.dominio}}?bridgeEndpoint=true"/>
            <convertBodyTo id="_convertBodyProductos" type="java.lang.String"/>
        </route>
    </camelContext>
</blueprint>
